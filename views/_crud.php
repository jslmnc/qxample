<?php


include('C:\xampp\htdocs\Overflow\includes\config.php');
session_start();


//getauthtokenpaypalapi
function getAuthToken($dbh){

  $ch = curl_init();

  curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/oauth2/token');
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");


$sql="SELECT * FROM settings ";
$query=$dbh->prepare($sql);

$query->execute();
$results=$query->fetchALL(PDO::FETCH_OBJ);

$cnt=1;
if ($query->rowCount()>0) {
  # code...
  foreach ($results as $result) 
  {
  # code...


  curl_setopt($ch, CURLOPT_USERPWD, ($result->paypalclientid) . ':' . ($result->paypalsecretkey));
  }
}

  $headers = array();
  $headers[] = 'Accept: application/json';
  $headers[] = 'Accept-Language: en_US';
  $headers[] = 'Content-Type: application/x-www-form-urlencoded';
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  
  $result = curl_exec($ch);
  $err=curl_error($ch);
  curl_close($ch);
  
  
  if($err){
  
      echo ' error: '.$err;
  
  }
  else{
  
      $response=json_decode($result);
  
     $response=json_decode($result,true);
  
      return $response['access_token'];
  
  }
  

}

function createaproduct($token){

$length = 32;    
$unique_id=substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'),1,$length);

// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/catalogs/products');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"name\": \"Overflow\",\n  \"description\": \"Note taking app\",\n  \"type\": \"SERVICE\",\n  \"category\": \"SOFTWARE\",\n  \"image_url\": \"https://i.ibb.co/Qc0b1Jt/cscsd-removebg-preview.png\",\n  \"home_url\": \"https://example.com/home\"\n}");

$headers = array();
$headers[] = 'Content-Type: application/json';
$headers[] = 'Authorization: Bearer '.rawurldecode($token);
$headers[] = 'Paypal-Request-Id: '.rawurldecode($unique_id);
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);
$err=curl_error($ch);
curl_close($ch);

if($err){

  echo ' error: '.$err;

}
else{


  
  $response=json_decode($result,true);
 
   return $response['id'];


}
}



//createplanpaypalapi
function createplan($token,$productID,$name,$description,$price){

  //$name="Premium";
  //$description="Premium Plan";
  $img="https://i.ibb.co/Qc0b1Jt/cscsd-removebg-preview.png";
  $url="localhost/Overflow/views/index";
  
  
  
  
  // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
  $ch = curl_init();
  
  curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans');
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n    \"name\": \"$name\",\n    \"description\": \"$description\",\n    \"product_id\": \"$productID\",\n    \"billing_cycles\": [\n        {\n            \"frequency\": {\n                \"interval_unit\": \"MONTH\",\n                \"interval_count\": 1\n            },\n            \"tenure_type\": \"REGULAR\",\n            \"sequence\": 1,\n            \"total_cycles\": 0,   \n            \"pricing_scheme\": {\n                \"fixed_price\": {\n                    \"value\": \"$price\",\n                    \"currency_code\": \"USD\"\n                }\n            }\n        }\n    ],\n    \"payment_preferences\": {\n        \"auto_bill_outstanding\": true,\n        \"payment_failure_threshold\": 1\n    }\n }");
  
  $headers = array();
  $headers[] = 'Content-Type: application/json';
  $headers[] = 'Authorization: Bearer '.rawurldecode($token);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  
  $result = curl_exec($ch);
  $err=curl_error($ch);
  curl_close($ch);
  
  if($err){
  
      echo ' error: '.$err;
  
  }
  else{
  
      $response=json_decode($result,true);
//getproductid
      return $response['id'];

  }
}


function deactivateplan($token,$planid){


// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans/'.$planid.'/deactivate');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);

$headers = array();
$headers[] = 'Content-Type: application/json';
$headers[] = 'Authorization: Bearer '.rawurldecode($token);
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);


$result = curl_exec($ch);
$err=curl_error($ch);
curl_close($ch);

if($err){

    echo ' error: '.$err;

}
else{

    $response=json_decode($result,true);
//getproductid
    //return $response['id'];

}
}

function suspendsubscription($token,$subscriptionid){


// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/subscriptions/'.$subscriptionid.'/suspend');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"reason\": \"Item out of stock\"\n}");

$headers = array();
$headers[] = 'Content-Type: application/json';
$headers[] = 'Authorization: Bearer '.rawurldecode($token);
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  
  
  $result = curl_exec($ch);
  $err=curl_error($ch);
  curl_close($ch);
  
  if($err){
  
      echo ' error: '.$err;
  
  }
  else{
  
      $response=json_decode($result,true);
  //getproductid
      //return $response['id'];
  
  }
  }

  function upgradesubscriptionplan($token,$subscriptionid,$planid){


    $ch = curl_init();

  curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/subscriptions/'.$subscriptionid.'/revise');
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"plan_id\": \"$planid\"\n}");

  $headers = array();
  $headers[] = 'Content-Type: application/json';
  $headers[] = 'Authorization: Bearer '.rawurldecode($token);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

      
      $result = curl_exec($ch);
      $err=curl_error($ch);
      curl_close($ch);
      
      if($err){
      
          echo ' error: '.$err;
      
      }
      else{
      
         return $response=json_decode($result,true);
      //getproductid
          //return $response['id'];
      
      }
      }


  // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/



function changeprice($token,$planid,$price){


  
// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans/'.$planid.'/update-pricing-schemes');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"pricing_schemes\": [\n    {\n      \"billing_cycle_sequence\": 1,\n      \"pricing_scheme\": {\n                \"fixed_price\": {\n                    \"value\": \"$price\",\n                    \"currency_code\": \"USD\"\n                }\n            }\n        }\n    ],\n    \"payment_preferences\": {\n        \"auto_bill_outstanding\": true,\n        \"payment_failure_threshold\": 1\n    }\n }");

$headers = array();
$headers[] = 'Content-Type: application/json';
$headers[] = 'Authorization: Bearer '.rawurldecode($token);
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

  $result = curl_exec($ch);
  $err=curl_error($ch);
  curl_close($ch);
  
  if($err){
  
      echo ' error: '.$err;
  
  }
  else{
  
      $response=json_decode($result,true);
  //getproductid
      //return $response['id'];
  
  }
  }


function cancelsub($token,$subscriptionid){


  

// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/subscriptions/'.$subscriptionid.'/cancel');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"reason\": \"Not satisfied with the service\"\n}");

$headers = array();
$headers[] = 'Content-Type: application/json';
$headers[] = 'Authorization: Bearer '.rawurldecode($token);
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);



$result = curl_exec($ch);
$err=curl_error($ch);
curl_close($ch);

if($err){

    echo ' error: '.$err;

}
else{

    $response=json_decode($result,true);
//getproductid
    //return $response['id'];

}
}

if(isset($_POST['action'])){
//echo 1;


  $subid=implode($_POST['id']);
  if($_POST['action']=="cancelsub"){


   // echo 0;



    
    $sql="SELECT * FROM subscription WHERE subscriberID=:subscriberID ";
    $query=$dbh->prepare($sql);
    $query->bindParam(':subscriberID',$subid,PDO::PARAM_STR);
    $query->execute();
    $results=$query->fetch(PDO::FETCH_ASSOC);
    if($query->rowCount()>0)
    {  
    
  
     $pid= $results['planID']; 
  
     $sql1="SELECT * FROM plans WHERE planID=:planID ";
     $query1=$dbh->prepare($sql1);
     $query1->bindParam(':planID',$pid,PDO::PARAM_STR);
     $query1->execute();
     $results1=$query1->fetch(PDO::FETCH_ASSOC);
     if($query1->rowCount()>0)
     {
  
  
    $status="FREE";
    // createplan(getAuthToken($dbh),createaproduct(getAuthToken($dbh)),$name,$description,$price);
    $sql="UPDATE subscription set status=:status where subscriberID=:subscriberID";
        $query=$dbh->prepare($sql);
        $query->bindParam(':status',$status,PDO::PARAM_STR);
        $query->bindParam(':subscriberID',$subid,PDO::PARAM_STR);
        
        $query->execute();
  
    cancelsub(getAuthToken($dbh),$subid);
  
  
  
    $description='You cancelled your automatic payments for: '.$results1['plan_name'].' $'.$results1['price'];
  
  
    $sql="INSERT INTO subhistory(description,subscriptionid)
    VALUES(:description,:subscriptionid)";
    $query=$dbh->prepare($sql);
    $query->bindParam(':description',$description,PDO::PARAM_STR);
        $query->bindParam(':subscriptionid',$subid,PDO::PARAM_STR);
  
            $query->execute();
           
  
  
  
  }
  
      
  
  }







}


  }

if(isset($_POST['action'])){
  // createplan(getAuthToken($dbh),createaproduct(getAuthToken($dbh)),$name,$description,$price);
 
   if($_POST['action']=="addevent"){

  
    $calendar_event_name=$_POST['calendar_event_name'];
    $calendar_event_description=$_POST['calendar_event_description'];
    $calendar_event_location=$_POST['calendar_event_location'];
    $calendar_event_start_date=$_POST['calendar_event_start_date'];
    $calendar_event_start_time=$_POST['calendar_event_start_time'];
    $calendar_event_end_date=$_POST['calendar_event_end_date'];
    $calendar_event_end_time=$_POST['calendar_event_end_time'];



    $sql="INSERT INTO events(calendar_event_name,calendar_event_description,calendar_event_location,calendar_event_start_date,calendar_event_start_time,calendar_event_end_date,calendar_event_end_time)
    VALUES(:calendar_event_name,:calendar_event_description,:calendar_event_location,:calendar_event_start_date,:calendar_event_start_time,:calendar_event_end_date,:calendar_event_end_time)";
    $query=$dbh->prepare($sql);
    $query->bindParam(':calendar_event_name',$calendar_event_name,PDO::PARAM_STR);
        $query->bindParam(':calendar_event_description',$calendar_event_description,PDO::PARAM_STR);
        $query->bindParam(':calendar_event_location',$calendar_event_location,PDO::PARAM_STR);
        $query->bindParam(':calendar_event_start_date',$calendar_event_start_date,PDO::PARAM_STR);
        $query->bindParam(':calendar_event_start_time',$calendar_event_start_time,PDO::PARAM_STR);
          $query->bindParam(':calendar_event_end_date',$calendar_event_end_date,PDO::PARAM_STR);
            $query->bindParam(':calendar_event_end_time',$calendar_event_end_time,PDO::PARAM_STR);
        

        
            $query->execute();


   }

  }


if(isset($_POST['action'])){
 // createplan(getAuthToken($dbh),createaproduct(getAuthToken($dbh)),$name,$description,$price);

  if($_POST['action']=="addplan"){


    $planname=$_POST['planname'];
    $description=$_POST['description'];
    $notelimit=$_POST['notelimit'];
    $spacelimit=$_POST['spacelimit'];
    $cycle=$_POST['cycle'];
    $price=$_POST['price'];
    $planid=createplan(getAuthToken($dbh),createaproduct(getAuthToken($dbh)),$planname,$description,$price);

    //$planid='t';


    $sql="INSERT INTO plans(plan_name,planID,plan_desc,note_limit,space_limit,cycle,price)
    VALUES(:plan_name,:planID,:plan_desc,:note_limit,:space_limit,:cycle,:price)";
    $query=$dbh->prepare($sql);
    $query->bindParam(':plan_name',$planname,PDO::PARAM_STR);
        $query->bindParam(':plan_desc',$description,PDO::PARAM_STR);
        $query->bindParam(':planID',$planid,PDO::PARAM_STR);
        $query->bindParam(':note_limit',$notelimit,PDO::PARAM_STR);
        $query->bindParam(':space_limit',$spacelimit,PDO::PARAM_STR);
          $query->bindParam(':cycle',$cycle,PDO::PARAM_STR);
            $query->bindParam(':price',$price,PDO::PARAM_STR);
        

        
            $query->execute();


  }

  }




if(isset($_GET['action'])){

  if($_GET['action']=="userlogincheck"){

    $username=$_GET['username'];
    $sql="SELECT * FROM user WHERE username=:username ";
    $query=$dbh->prepare($sql);
    $query->bindParam(':username',$username,PDO::PARAM_STR);
    $query->execute();
    $results=$query->fetch(PDO::FETCH_ASSOC);
    if($query->rowCount()>0)
    {
      $exist = true; 
      
    }
    else{
      $exist = false; 
    
    
    }
    
    
    echo json_encode(array(
      'valid' => $exist,
    ));
  }

}

//resetpassemail
if(isset($_GET['action'])){

  if($_GET['action']=="resetpassemail"){

    $email=$_GET['email'];
    $sql="SELECT * FROM user WHERE email=:email ";
    $query=$dbh->prepare($sql);
    $query->bindParam(':email',$email,PDO::PARAM_STR);
    $query->execute();
    $results=$query->fetch(PDO::FETCH_ASSOC);
    if($query->rowCount()>0)
    {
      $exist = true; 
      
    }
    else{
      $exist = false; 
    
    
    }
    
    
    echo json_encode(array(
      'valid' => $exist,
    ));
  }

}


if(isset($_GET['action'])){

  if($_GET['action']=="usernamecheck"){

    $username=$_GET['username'];
    $sql="SELECT * FROM user WHERE username=:username ";
    $query=$dbh->prepare($sql);
    $query->bindParam(':username',$username,PDO::PARAM_STR);
    $query->execute();
    $results=$query->fetch(PDO::FETCH_ASSOC);
    if($query->rowCount()>0)
    {
      $exist = false; 
      
    }
    else{
      $exist = true; 
    
    
    }
    
    
    echo json_encode(array(
      'valid' => $exist,
    ));
  }

}



//------------------------------------------------------------------




//deleterole
  if(isset($_POST['action'])){

    if($_POST['action']=="deleterole"){
      $id=$_POST['id'];
  
      $query1="DELETE from roles where id=:id";
      $query1=$dbh->prepare($query1);
      $query1->bindValue('id',$id);
      $query1->execute();
  
      echo 1;
      
  
  
    }
    else{
      echo 0;
    }
  }

//check if email is registered or not
if(isset($_GET['action'])){
  if($_GET['action']=="emailcheck"){
    $email=$_GET['email'];
    $sql="SELECT * FROM user WHERE email=:email ";
    $query=$dbh->prepare($sql);
    $query->bindParam(':email',$email,PDO::PARAM_STR);
    $query->execute();
    $results=$query->fetch(PDO::FETCH_ASSOC);
    if($query->rowCount()>0)
    {
      $exist = false; 
      
    }
    else{
      $exist = true; 
    
    
    }
    
    
    echo json_encode(array(
      'valid' => $exist,
    ));
  
}
}

//deletenote
if(isset($_POST['action'])){

  if($_POST['action']=="deletenote"){
    $id=$_POST['id'];

    $sql="SELECT * FROM note where id=".$id."";
    $query=$dbh->prepare($sql);
    $query->execute();
    $results=$query->fetchALL(PDO::FETCH_OBJ);
    if ($query->rowCount()>0) {
      # code...
      foreach ($results as $result) 
      {

     
        $query1="DELETE from note where id=:id";
        $query1=$dbh->prepare($query1);
        $query1->bindValue('id',$id);
        $query1->execute();
        //recurseRmdir($del);
        echo 1;
  
  }
  }

}
}


if(isset($_POST['action'])){

  if($_POST['action']=="trashnote"){
    $id=$_POST['id'];
    $trash=1;

    $sql="SELECT * FROM note where id=".$id."";
    $query=$dbh->prepare($sql);
    $query->execute();
    $results=$query->fetchALL(PDO::FETCH_OBJ);
    if ($query->rowCount()>0) {
      # code...
      foreach ($results as $result) 
      {

     
        $sql="UPDATE note set trash=:trash where id=:id";
        $query=$dbh->prepare($sql);
        $query->bindParam(':trash',$trash,PDO::PARAM_STR);
        $query->bindParam(':id',$id,PDO::PARAM_STR);
        
        $query->execute();
        echo 1;
  
  }
  }

}
}

if(isset($_POST['action'])){

  if($_POST['action']=="deleteplan"){

    $id=$_POST['id'];

    $sql="SELECT * FROM plans where id=".$id."";
    $query=$dbh->prepare($sql);
    $query->execute();
    $results=$query->fetchALL(PDO::FETCH_OBJ);
    if ($query->rowCount()>0) {
      # code...
      foreach ($results as $result) 
      {
        $planid=$result->planID;

        deactivateplan(getAuthToken($dbh),$planid);

        $query1="DELETE from plans where id=:id";
        $query1=$dbh->prepare($query1);
        $query1->bindValue('id',$id);
        $query1->execute();
      }
    }


     
      

      


        

      

        //recurseRmdir($del);
        echo 1;
  
  }
  }




//delete user
if(isset($_POST['action'])){

  if($_POST['action']=="deleteuser"){
    $id=$_POST['id'];

    $sql="SELECT * FROM user where id=".$id."";
    $query=$dbh->prepare($sql);
    $query->execute();
    $results=$query->fetchALL(PDO::FETCH_OBJ);
    if ($query->rowCount()>0) {
      # code...
      foreach ($results as $result) 
      {

       // $foldername=$result->$uid;

       // $dir ="../files/user/".$foldername."/profile";
        //delete 

       // array_map("unlink", glob("$dir/*")); 
       // array_map("rmdir", glob("$dir/*")); 
      //  rmdir($dirname);
   

      $dir1 ="../files/user/".$result->uid."/user_files";
      //delete old profile pic
      foreach(glob($dir1 . '/*') as $file){
        // check if is a file and not sub-directory
        if(is_file($file)){
          // delete file
          unlink($file);
        }
        else{

          if(rmdir("../files/user/".$result->uid."/profile"));
          if(rmdir("../files/user/".$result->uid."/user_files"));
          if(rmdir("../files/user/".$result->uid));
          rmdir("../files/user/".$result->uid."/profile");
          rmdir("../files/user/".$result->uid."/user_files");
          rmdir("../files/user/".$result->uid);
          
        }
      }

      if(rmdir("../files/user/".$result->uid."/profile"));
      if(rmdir("../files/user/".$result->uid."/user_files"));
      if(rmdir("../files/user/".$result->uid));
      rmdir("../files/user/".$result->uid."/profile");
      rmdir("../files/user/".$result->uid."/user_files");
      rmdir("../files/user/".$result->uid);
  
      
          $dir ="../files/user/".$result->uid."/profile";
          //delete old profile pic
          foreach(glob($dir . '/*') as $file){
            // check if is a file and not sub-directory
            if(is_file($file)){
              // delete file
              unlink($file);
            }
            else{

              if(rmdir("../files/user/".$result->uid."/profile"));
              if(rmdir("../files/user/".$result->uid."/user_files"));
              if(rmdir("../files/user/".$result->uid));
              rmdir("../files/user/".$result->uid."/profile");
              rmdir("../files/user/".$result->uid."/user_files");
              rmdir("../files/user/".$result->uid);
              
            }
          }

          if(rmdir("../files/user/".$result->uid."/profile"));
          if(rmdir("../files/user/".$result->uid."/user_files"));
          if(rmdir("../files/user/".$result->uid));
          rmdir("../files/user/".$result->uid."/profile");
          rmdir("../files/user/".$result->uid."/user_files");
          rmdir("../files/user/".$result->uid);
     
        $query1="DELETE from user where id=:id";
        $query1=$dbh->prepare($query1);
        $query1->bindValue('id',$id);
        $query1->execute();
        //recurseRmdir($del);
        echo 1;
  
  }
  }

}
}

if(isset($_POST['action'])){
  $id=$_POST['id'];
  if($_POST['action']=="userlogsdelete"){
    $id=$_POST['id'];

    foreach($_POST['id']as $id){

     
          
       
          $query1="DELETE from login_log where id=:id";
          $query1=$dbh->prepare($query1);
          $query1->bindValue('id',$id);
          $query1->execute();

          echo 1;  
          //recurseRmdir($del);
        
      
    
    
 }
 //echo 1;  
     
    }

    

    }


   //trashcheckednotes
if(isset($_POST['action'])){
  $id=$_POST['id'];
  if($_POST['action']=="trashselected"){
    $id=$_POST['id'];
    
    $trash=1;
    foreach($_POST['id']as $id){

      $sql="SELECT * FROM note where id=".$id."";
      $query=$dbh->prepare($sql);
      $query->execute();
      $results=$query->fetchALL(PDO::FETCH_OBJ);
      if ($query->rowCount()>0) {

        
      // echo 1;
        # code...
        foreach ($results as $result) 
        {
          
        
          $sql="UPDATE note set trash=:trash where id=:id";
          $query=$dbh->prepare($sql);
          $query->bindParam(':trash',$trash,PDO::PARAM_STR);
          $query->bindParam(':id',$id,PDO::PARAM_STR);
          
          $query->execute();
          echo 1;
      
    
    }
    }
    else{

      //echo 0;
    }



    }


   

  
    


  }
  else{
   
  }
}

  
//untrashcheckednotes
if(isset($_POST['action'])){
  $id=$_POST['id'];
  if($_POST['action']=="deletetrash"){
    $id=$_POST['id'];

    $trash=0;
    foreach($_POST['id']as $id){

      $sql="SELECT * FROM note where id=".$id."";
      $query=$dbh->prepare($sql);
      $query->execute();
      $results=$query->fetchALL(PDO::FETCH_OBJ);
      if ($query->rowCount()>0) {

        
      // echo 1;
        # code...
        foreach ($results as $result) 
        {
          
          $query="DELETE from note where id=:id";
          $query=$dbh->prepare($query);
          $query->bindValue('id',$id);
          $query->execute();
      
          
          $query->execute();
          echo 1;
      
    
    }
    }
    else{

      //echo 0;
    }



    }


   

  
    


  }
  else{
   
  }
}

//deletetrash
if(isset($_POST['action'])){
  $id=$_POST['id'];
  if($_POST['action']=="untrashselected"){
    $id=$_POST['id'];

    $trash=0;
    foreach($_POST['id']as $id){

      $sql="SELECT * FROM note where id=".$id."";
      $query=$dbh->prepare($sql);
      $query->execute();
      $results=$query->fetchALL(PDO::FETCH_OBJ);
      if ($query->rowCount()>0) {

        
      // echo 1;
        # code...
        foreach ($results as $result) 
        {
          
        
          $sql="UPDATE note set trash=:trash where id=:id";
          $query=$dbh->prepare($sql);
          $query->bindParam(':trash',$trash,PDO::PARAM_STR);
          $query->bindParam(':id',$id,PDO::PARAM_STR);
          
          $query->execute();
          echo 1;
      
    
    }
    }
    else{

      //echo 0;
    }



    }


   

  
    


  }
  else{
   
  }
}

  
//deleteselectedfile

if(isset($_POST['action'])){
  $id=$_POST['id'];
  if($_POST['action']=="deleteselectedfile"){
   
    echo 1;
    foreach($_POST['id']as $id){

    
      $d=$id;

      //$dir ="../files/user/".$result->uid."/profile";

      unlink($d);
     

  }

}
}

//deleteselectedplan
if(isset($_POST['action'])){
  $id=$_POST['id'];
  if($_POST['action']=="deleteselectedplan"){
    $id=$_POST['id'];

    foreach($_POST['id']as $id){

    $sql="SELECT * FROM plans where id=".$id."";
    $query=$dbh->prepare($sql);
    $query->execute();
    $results=$query->fetchALL(PDO::FETCH_OBJ);
    if ($query->rowCount()>0) {
      # code...
      foreach ($results as $result) 
      {
        $planid=$result->planID;

        deactivateplan(getAuthToken($dbh),$planid);



      $query1="DELETE from plans where id=:id";
      $query1=$dbh->prepare($query1);
      $query1->bindValue('id',$id);
      $query1->execute();
      //recurseRmdir($del);
      echo 1;  

    }
  }
}
  }
}


//deletecheckbox user
if(isset($_POST['action'])){
  $id=$_POST['id'];
  if($_POST['action']=="deleteall"){
    $id=$_POST['id'];

    foreach($_POST['id']as $id){

      $sql="SELECT * FROM user where id=".$id."";
      $query=$dbh->prepare($sql);
      $query->execute();
      $results=$query->fetchALL(PDO::FETCH_OBJ);
      if ($query->rowCount()>0) {

        
      // echo 1;
        # code...
        foreach ($results as $result) 
        {
          $dir1 ="../files/user/".$result->uid."/user_files";
          //delete old profile pic
          foreach(glob($dir1 . '/*') as $file){
            // check if is a file and not sub-directory
            if(is_file($file)){
              // delete file
              unlink($file);
            }
            else{
    
              if(rmdir("../files/user/".$result->uid."/profile"));
              if(rmdir("../files/user/".$result->uid."/user_files"));
              if(rmdir("../files/user/".$result->uid));
              rmdir("../files/user/".$result->uid."/profile");
              rmdir("../files/user/".$result->uid."/user_files");
              rmdir("../files/user/".$result->uid);
              
            }
          }
    
          if(rmdir("../files/user/".$result->uid."/profile"));
          if(rmdir("../files/user/".$result->uid."/user_files"));
          if(rmdir("../files/user/".$result->uid));
          rmdir("../files/user/".$result->uid."/profile");
          rmdir("../files/user/".$result->uid."/user_files");
          rmdir("../files/user/".$result->uid);
      
          
              $dir ="../files/user/".$result->uid."/profile";
              //delete old profile pic
              foreach(glob($dir . '/*') as $file){
                // check if is a file and not sub-directory
                if(is_file($file)){
                  // delete file
                  unlink($file);
                }
                else{
    
                  if(rmdir("../files/user/".$result->uid."/profile"));
                  if(rmdir("../files/user/".$result->uid."/user_files"));
                  if(rmdir("../files/user/".$result->uid));
                  rmdir("../files/user/".$result->uid."/profile");
                  rmdir("../files/user/".$result->uid."/user_files");
                  rmdir("../files/user/".$result->uid);
                  
                }
              }
    
              if(rmdir("../files/user/".$result->uid."/profile"));
              if(rmdir("../files/user/".$result->uid."/user_files"));
              if(rmdir("../files/user/".$result->uid));
              rmdir("../files/user/".$result->uid."/profile");
              rmdir("../files/user/".$result->uid."/user_files");
              rmdir("../files/user/".$result->uid);
         
              $query1="DELETE from user where id=:id";
              $query1=$dbh->prepare($query1);
              $query1->bindValue('id',$id);
              $query1->execute();
          //recurseRmdir($del);
          echo 1;  
      
    
    }
    }
    else{

      echo 0;
    }



    }


   

  
    


  }
  else{
   
  }
}
/*

if(isset($_POST['action'])){

  if($_POST['action']=="deleteuser"){
    $id=$_POST['id'];

    

   

    $sql="SELECT * FROM user WHERE id=:id";
    $query=$dbh->prepare($sql);
    $query->bindParam(':id',$id,PDO::PARAM_STR);
    $query->execute();
    $results=$query->fetch(PDO::FETCH_ASSOC);
    while($query->rowCount()>0)
    {

      $email=$results['email'];
      $uid=$results['uid'];

      $dir ="../files/user/".$uid."/profile";
      //delete old profile pic
      foreach(glob($dir . '/*') as $file){
        // check if is a file and not sub-directory
        if(is_file($file)){
          // delete file
          unlink($file);
        }
      }

      $query="DELETE from user where id=:id";
      $query1=$dbh->prepare($query);
      $query1->bindValue('id',$id);
      $query1->execute();

      $sql="SELECT * FROM user WHERE id=:id";
      $query=$dbh->prepare($sql);
      $query->bindParam(':id',$id,PDO::PARAM_STR);
      $query->execute();
      $results=$query->fetch(PDO::FETCH_ASSOC);
      if($query->rowCount()>0)
      {
      if($results['uid']==$uid){
      $query="DELETE from chat where incomingid=:incomingid";
      $query1=$dbh->prepare($query);
      $query1->bindValue('incomingid',$uid);
      $query1->execute();
        }


      }
      
    $sql="SELECT * FROM user WHERE id=:id";
    $query=$dbh->prepare($sql);
    $query->bindParam(':id',$id,PDO::PARAM_STR);
    $query->execute();
    $results=$query->fetch(PDO::FETCH_ASSOC);
    if($query->rowCount()>0)
    {
      if($results['email']==$email){
        $query="DELETE from emailconfirmation where email=:email";
        $query1=$dbh->prepare($query);
        $query1->bindValue('email',$email);
        $query1->execute();
        $query="DELETE from passreset where email=:email";
        $query1=$dbh->prepare($query);
        $query1->bindValue('email',$email);
        $query1->execute();

      }

    }
 


        $query="DELETE from login_log where userid=:userid";
        $query1=$dbh->prepare($query);
        $query1->bindValue('userid',$id);
        $query1->execute();

 


    }
    echo 1;

  }
  else{
    echo 0;
  }
}
*/

if(isset($_POST['rolename'])){

  $role=$_POST['rolename'];

  $sql="INSERT INTO roles(rolename)VALUES(:rolename)";
  $query=$dbh->prepare($sql);
  $query->bindParam(':rolename',$role,PDO::PARAM_STR);

      
          $query->execute();



}






if(isset($_POST['action'])){

  if($_POST['action']=="adduser"){


    
    $length = 20;    
    $s=substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'),1,$length);
    
    $randomid = 'user_'.$s;
  
  $fname=$_POST['fname'];
  $lname=$_POST['lname'];
  $email=$_POST['email'];
  $username=$_POST['username'];
  $password=$_POST['password'];
  $status=$_POST['status'];
  $image=$_POST['avatar'];
  $role=$_POST['role'];
  
    
  $sql="SELECT * FROM user WHERE uid=:uid";
  $query=$dbh->prepare($sql);
  $query->bindParam(':uid',$randomid,PDO::PARAM_STR);
  $query->execute();
  $results=$query->fetch(PDO::FETCH_ASSOC);
  if($query->rowCount()>0)
  {
  
  $length = 20;    
  $s=substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'),1,$length);
  
  $randomid = 'user_'.$s;
  
  
  }
  else{
  
      $randomid = 'user_'.$s;
  
  }
  $fileName = $_FILES["avatar"]["name"];
  $tmpName = $_FILES["avatar"]["tmp_name"];
  
  
  $imageExtension = explode('.', $fileName);
  $imageExtension = strtolower(end($imageExtension));
  
  
  $newImageName = uniqid();
  $newImageName .= '.' . $imageExtension;
  
    
  if (!is_dir("../files/user/".$randomid."/profile")) {
    //mkdir("../username", 0777,true);
      mkdir("../files/user/".$randomid."/profile", 0777,true);
      mkdir("../files/user/".$randomid."/user_files", 0777,true);

          
      move_uploaded_file($tmpName, "../files/user/".$randomid."/profile/". $newImageName);
  
  }
  else{
      move_uploaded_file($tmpName, "../files/user/".$randomid."/profile/". $newImageName);
  
  
  }
  
    $status="offline";
    $type="active";
    $sql="INSERT INTO user(role,uid,fname,lname,email,username,password,status,type,image)VALUES(:role,:uid,:fname,:lname,:email,:username,:password,:status,:type,:image)";
    $query=$dbh->prepare($sql);
    $query->bindParam(':uid',$randomid,PDO::PARAM_STR);
        $query->bindParam(':role',$role,PDO::PARAM_STR);
        $query->bindParam(':fname',$fname,PDO::PARAM_STR);
        $query->bindParam(':lname',$lname,PDO::PARAM_STR);
        $query->bindParam(':email',$email,PDO::PARAM_STR);
          $query->bindParam(':username',$username,PDO::PARAM_STR);
            $query->bindParam(':password',$password,PDO::PARAM_STR);
            $query->bindParam(':status',$status,PDO::PARAM_STR);
            $query->bindParam(':type',$type,PDO::PARAM_STR);

            $query->bindParam(':image',$newImageName,PDO::PARAM_STR);

        
            $query->execute();
  
  //DIRECTORY CREATION IF USER DIRECTORY DOESNT EXIST
  //  move_uploaded_file($tmpName, "../files/user/".($result->username)."profile/" . $newImageName);

  
  
      


  }

}

///add user

      
  
  
  
//usernameusercheck
if(isset($_GET['action'])){
  if($_GET['action']=='usernameusercheck'){

  $username=$_GET['username1'];
  $u1=$_GET['u1'];
  $sql="SELECT * FROM user WHERE username=:username ";
  $query=$dbh->prepare($sql);
  $query->bindParam(':username',$username,PDO::PARAM_STR);
  $query->execute();
  $results=$query->fetch(PDO::FETCH_ASSOC);
  if($query->rowCount()>0)
  {
    if($u1==$username&&$username==$results['username']){
     
      $exist = true;
    }
    else{
      $exist = false;
      
    }

        
 
        }
        else{
        
             $exist = true;
       
          }

  echo json_encode(array(
    'valid' => $exist,
  ));
  }}



  //emailusercheck
  if(isset($_GET['action'])){
    if($_GET['action']=='emailusercheck'){

    $email=$_GET['email1'];
    $e1=$_GET['e1'];
    $sql="SELECT * FROM user WHERE email=:email ";
    $query=$dbh->prepare($sql);
    $query->bindParam(':email',$email,PDO::PARAM_STR);
    $query->execute();
    $results=$query->fetch(PDO::FETCH_ASSOC);
    if($query->rowCount()>0)
    {
      
      if($e1==$email&&$email==$results['email']){
     
        $exist = true;
      }
      else{
        $exist = false;
        
      }
  
          
   
          }
          else{
          
               $exist = true;
         
            }
    
    
    echo json_encode(array(
      'valid' => $exist,
    ));
    


    }

  }
  




  //editsettingsgeo

  if(isset($_POST['action'])){

    if($_POST['action']=="editsettings"){

    $id=$_POST['id'];

    $groupname=$_POST['groupname'];
    $address=$_POST['address'];
    $coordinates=$_POST['coordinates'];
    $email=$_POST['email'];
    $phone=$_POST['phone'];

    $emailname=$_POST['emailname'];
    $smtpemailaddress=$_POST['smtpemailaddress'];
    $host=$_POST['host'];
    $port=$_POST['port'];
    $password=$_POST['password'];
    $paypalclientid=$_POST['paypalclientid'];
    $paypalsecretkey=$_POST['paypalsecretkey'];


    

    $sql="UPDATE settings set groupname=:groupname, address=:address, coordinates=:coordinates,email=:email,contactno=:contactno,emailname=:emailname
    ,smtpemailaddress=:smtpemailaddress,host=:host,port=:port,password=:password,paypalclientid=:paypalclientid,paypalsecretkey=:paypalsecretkey
    
     where id=:id";
    $query=$dbh->prepare($sql);
    $query->bindParam(':groupname',$groupname,PDO::PARAM_STR);
    $query->bindParam(':address',$address,PDO::PARAM_STR);
    $query->bindParam(':coordinates',$coordinates,PDO::PARAM_STR);
    $query->bindParam(':email',$email,PDO::PARAM_STR);
    $query->bindParam(':contactno',$phone,PDO::PARAM_STR);

    $query->bindParam(':emailname',$emailname,PDO::PARAM_STR);
    $query->bindParam(':smtpemailaddress',$smtpemailaddress,PDO::PARAM_STR);
    $query->bindParam(':host',$host,PDO::PARAM_STR);
    $query->bindParam(':port',$port,PDO::PARAM_STR);
    $query->bindParam(':password',$password,PDO::PARAM_STR);
    $query->bindParam(':paypalclientid',$paypalclientid,PDO::PARAM_STR);
    $query->bindParam(':paypalsecretkey',$paypalsecretkey,PDO::PARAM_STR);

    $query->bindParam(':id',$id,PDO::PARAM_STR);

    $query->execute();
  


    }
  }



  if(isset($_POST['action'])){

    if($_POST['action']=="editplan"){
      $id=$_POST['id'];

      $planID=$_POST['planID'];

     // echo  $planID;


      $planname=$_POST['planname'];
      $description=$_POST['description'];
      $notelimit=$_POST['notelimit'];
      $spacelimit=$_POST['spacelimit'];
      $cycle=$_POST['cycle'];
      $price=$_POST['price'];

   
      
      $sql="UPDATE plans set plan_name=:plan_name, plan_desc=:plan_desc, note_limit=:note_limit,space_limit=:space_limit,cycle=:cycle,price=:price where id=:id";
      $query=$dbh->prepare($sql);
      $query->bindParam(':plan_name',$planname,PDO::PARAM_STR);
      $query->bindParam(':plan_desc',$description,PDO::PARAM_STR);
      $query->bindParam(':note_limit',$notelimit,PDO::PARAM_STR);
      $query->bindParam(':space_limit',$spacelimit,PDO::PARAM_STR);
      $query->bindParam(':cycle',$cycle,PDO::PARAM_STR);
      $query->bindParam(':price',$price,PDO::PARAM_STR);
      $query->bindParam(':id',$id,PDO::PARAM_STR);
      changeprice(getAuthToken($dbh),$planID,$price);
   //   changeplandescription(getAuthToken($dbh),$planID);
      //changeplanname(getAuthToken($dbh),$planID);
      //changeprice(getAuthToken($dbh),$planID,$price);

     // changeplandescription(getAuthToken($dbh),$planID,$description);
    
     // setcookie('username',$username,time()+(10*365*24*60*60));
     // setcookie('password',$password,time()+(10*365*24*60*60));
   
   
    
      $query->execute();
  
    }
    
  }

if(isset($_POST['action'])){

  if($_POST['action']=="edituser"){


    $id=$_POST['id1'];
    $fname=$_POST['fname1'];
    $lname=$_POST['lname1'];
    $email=$_POST['email1'];
    $username=$_POST['username1'];
    $password=$_POST['password1'];
    $status=$_POST['status1'];
    $image=$_POST['avatar1'];
    $role=$_POST['role1'];
    
  
  //$sql="UPDATE user set fname=:fname, lname=:lname, email=:email, username=:username, password=:password where id=:id";
  ////  $query=$dbh->prepare($sql);
  //  $query->bindParam(':fname',$fname,PDO::PARAM_STR);
  //  $query->bindParam(':lname',$lname,PDO::PARAM_STR);
  //  $query->bindParam(':email',$email,PDO::PARAM_STR);
  //  $query->bindParam(':username',$username,PDO::PARAM_STR);
   // $query->bindParam(':password',$password,PDO::PARAM_STR);

  // $query->bindParam(':id',$id,PDO::PARAM_STR);
  // $query->execute();

  if(!empty($_FILES["avatar1"]["tmp_name"])){

    $sql="SELECT * FROM user where id=".$id."";
    $query=$dbh->prepare($sql);
    $query->execute();
    $results=$query->fetchALL(PDO::FETCH_OBJ);
    
    $cnt=1;
    if ($query->rowCount()>0) {
      # code...
      foreach ($results as $result) 
      {
 
 
   $fileName = $_FILES["avatar1"]["name"];
   $tmpName = $_FILES["avatar1"]["tmp_name"];
   
   
   $imageExtension = explode('.', $fileName);
   $imageExtension = strtolower(end($imageExtension));
   
   
   $newImageName = uniqid();
   $newImageName .= '.' . $imageExtension;
 
 
 
  // unset($_SESSION['username1']);
  // unset($_SESSION['email1']);
 
   $dir ="../files/user/".$result->uid."/profile";
   //delete old profile pic
   foreach(glob($dir . '/*') as $file){
     // check if is a file and not sub-directory
     if(is_file($file)){
       // delete file
       unlink($file);
     }
   }
 
 
 //DIRECTORY CREATION IF USER DIRECTORY DOESNT EXIST
 //  move_uploaded_file($tmpName, "../files/user/".($result->username)."profile/" . $newImageName);
   if (!is_dir("../files/user/".$result->uid."/profile")) {
     //mkdir("../username", 0777,true);
       mkdir("../files/user/".$result->uid."/profile", 0777,true);
       move_uploaded_file($tmpName, "../files/user/".$result->uid."/profile/". $newImageName);
 
   }
   else{
       //   mkdir("../files/user/".$result->uid."/profile", 0777,true);
       move_uploaded_file($tmpName, "../files/user/".$result->uid."/profile/". $newImageName);
 
 
   }
 
   $sql="UPDATE user set fname=:fname, lname=:lname, email=:email,username=:username,image=:image,password=:password,role=:role where id=:id";
   $query=$dbh->prepare($sql);
   $query->bindParam(':fname',$fname,PDO::PARAM_STR);
   $query->bindParam(':lname',$lname,PDO::PARAM_STR);
   $query->bindParam(':email',$email,PDO::PARAM_STR);
   $query->bindParam(':username',$username,PDO::PARAM_STR);
   $query->bindParam(':image',$newImageName,PDO::PARAM_STR);
   $query->bindParam(':password',$password,PDO::PARAM_STR);
   $query->bindParam(':role',$role,PDO::PARAM_STR);
   $query->bindParam(':id',$id,PDO::PARAM_STR);
 
  // setcookie('username',$username,time()+(10*365*24*60*60));
  // setcookie('password',$password,time()+(10*365*24*60*60));


 
   $query->execute();
 
 }



    }
       
     }
     else{

       
      $sql="UPDATE user set fname=:fname, lname=:lname, email=:email, username=:username, password=:password, role=:role where id=:id";
      $query=$dbh->prepare($sql);
      $query->bindParam(':fname',$fname,PDO::PARAM_STR);
      $query->bindParam(':lname',$lname,PDO::PARAM_STR);
      $query->bindParam(':email',$email,PDO::PARAM_STR);
      $query->bindParam(':username',$username,PDO::PARAM_STR);
      $query->bindParam(':password',$password,PDO::PARAM_STR);
      $query->bindParam(':role',$role,PDO::PARAM_STR);
      $query->bindParam(':id',$id,PDO::PARAM_STR);

     // setcookie('username',$username,time()+(10*365*24*60*60));
     // setcookie('password',$password,time()+(10*365*24*60*60));
    
      $query->execute();
    
    
    
          
       }  


  }


}
  
 
  

  //    $query->bindParam(':role',$role,PDO::PARAM_STR);
          //    $query->bindParam(':id',$id,PDO::PARAM_STR);
      
    
   // }


   if(isset($_POST['action'])){

    if($_POST['action']=="editviewuser"){
  
  
      $id=$_POST['id1'];
      $fname=$_POST['fname1'];
      $lname=$_POST['lname1'];
      $email=$_POST['email1'];
      $username=$_POST['username1'];
      $password=$_POST['password1'];
      $status=$_POST['status1'];
      $image=$_POST['avatar1'];
      $role=$_POST['role1'];
      
    
    //$sql="UPDATE user set fname=:fname, lname=:lname, email=:email, username=:username, password=:password where id=:id";
    ////  $query=$dbh->prepare($sql);
    //  $query->bindParam(':fname',$fname,PDO::PARAM_STR);
    //  $query->bindParam(':lname',$lname,PDO::PARAM_STR);
    //  $query->bindParam(':email',$email,PDO::PARAM_STR);
    //  $query->bindParam(':username',$username,PDO::PARAM_STR);
     // $query->bindParam(':password',$password,PDO::PARAM_STR);
  
    // $query->bindParam(':id',$id,PDO::PARAM_STR);
    // $query->execute();
  
    if(!empty($_FILES["avatar1"]["tmp_name"])){
  
      $sql="SELECT * FROM user where id=".$id."";
      $query=$dbh->prepare($sql);
      $query->execute();
      $results=$query->fetchALL(PDO::FETCH_OBJ);
      
      $cnt=1;
      if ($query->rowCount()>0) {
        # code...
        foreach ($results as $result) 
        {
   
   
     $fileName = $_FILES["avatar1"]["name"];
     $tmpName = $_FILES["avatar1"]["tmp_name"];
     
     
     $imageExtension = explode('.', $fileName);
     $imageExtension = strtolower(end($imageExtension));
     
     
     $newImageName = uniqid();
     $newImageName .= '.' . $imageExtension;
   
   
   
    // unset($_SESSION['username1']);
    // unset($_SESSION['email1']);
   
     $dir ="../files/user/".$result->uid."/profile";
     //delete old profile pic
     foreach(glob($dir . '/*') as $file){
       // check if is a file and not sub-directory
       if(is_file($file)){
         // delete file
         unlink($file);
       }
     }
   
   
   //DIRECTORY CREATION IF USER DIRECTORY DOESNT EXIST
   //  move_uploaded_file($tmpName, "../files/user/".($result->username)."profile/" . $newImageName);
     if (!is_dir("../files/user/".$result->uid."/profile")) {
       //mkdir("../username", 0777,true);
         mkdir("../files/user/".$result->uid."/profile", 0777,true);
         move_uploaded_file($tmpName, "../files/user/".$result->uid."/profile/". $newImageName);
   
     }
     else{
         //   mkdir("../files/user/".$result->uid."/profile", 0777,true);
         move_uploaded_file($tmpName, "../files/user/".$result->uid."/profile/". $newImageName);
   
   
     }
   
     $sql="UPDATE user set fname=:fname, lname=:lname, email=:email,username=:username,image=:image,password=:password,role=:role where id=:id";
     $query=$dbh->prepare($sql);
     $query->bindParam(':fname',$fname,PDO::PARAM_STR);
     $query->bindParam(':lname',$lname,PDO::PARAM_STR);
     $query->bindParam(':email',$email,PDO::PARAM_STR);
     $query->bindParam(':username',$username,PDO::PARAM_STR);
     $query->bindParam(':image',$newImageName,PDO::PARAM_STR);
     $query->bindParam(':password',$password,PDO::PARAM_STR);
     $query->bindParam(':role',$role,PDO::PARAM_STR);
     $query->bindParam(':id',$id,PDO::PARAM_STR);
   
    // setcookie('username',$username,time()+(10*365*24*60*60));
    // setcookie('password',$password,time()+(10*365*24*60*60));
  
  
   
     $query->execute();
   
   }
  
  
  
      }
         
       }
       else{
  
         
        $sql="UPDATE user set fname=:fname, lname=:lname, email=:email, username=:username, password=:password, role=:role where id=:id";
        $query=$dbh->prepare($sql);
        $query->bindParam(':fname',$fname,PDO::PARAM_STR);
        $query->bindParam(':lname',$lname,PDO::PARAM_STR);
        $query->bindParam(':email',$email,PDO::PARAM_STR);
        $query->bindParam(':username',$username,PDO::PARAM_STR);
        $query->bindParam(':password',$password,PDO::PARAM_STR);
        $query->bindParam(':role',$role,PDO::PARAM_STR);
        $query->bindParam(':id',$id,PDO::PARAM_STR);
  
       // setcookie('username',$username,time()+(10*365*24*60*60));
       // setcookie('password',$password,time()+(10*365*24*60*60));
      
        $query->execute();
      
      
      
            
         }  
  
  
    }
  
  
  }
    


?>